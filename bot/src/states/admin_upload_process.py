import os
import ujson
import datetime
from pathlib import Path
from ..models.users import Users
from telegram import Update, File
from ..filters.is_admin import IsAdmin
from ..keyboards import KeyboardMarkup
from ..keyboards.admin_keybd import AdminKeyboard
from telegram.ext import ConversationHandler, CallbackContext, MessageHandler, CommandHandler, Filters


# –≠—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª –∂—É—Ä–Ω–∞–ª–∞ –∏ —Ñ–∞–π–ª AML, –∞ –∑–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
class AdminUploadConversation:
    # –ü—É—Ç—å –¥–æ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø—Ä–æ–µ–∫—Ç–∞.
    app_dir: Path = Path(__file__).parent.parent.parent

    def __init__(self):
        # –ü—É—Ç—å –∫ –∫–∞—Ç–∞–ª–æ–≥—É "–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞", –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ñ–∞–π–ª—ã.
        self.report_dir: Path = Path(AdminUploadConversation.app_dir, "reports", "preparing")

        # –≠—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤.
        self.UPLOAD_FILE, self.UPLOAD_AML_LOG = range(2)
        self.handler = ConversationHandler(
            entry_points=[MessageHandler(Filters.text("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É") & IsAdmin(), self.start)],
            states={
                self.UPLOAD_FILE: [MessageHandler(~Filters.text("‚ùå –û—Ç–º–µ–Ω–∞") & Filters.document & IsAdmin(),
                                                  self.upload_log_or_zip)],
                self.UPLOAD_AML_LOG: [MessageHandler(~Filters.text("‚ùå –û—Ç–º–µ–Ω–∞") & Filters.document & IsAdmin(),
                                                     self.upload_aml_log)]
            },
            fallbacks=[MessageHandler(Filters.text("‚ùå –û—Ç–º–µ–Ω–∞") & IsAdmin(), self.cancel)])

    def keybd_cancel(self, button: str = None):
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "‚ùå –û—Ç–º–µ–Ω–∞"

        :param button: –ö–Ω–æ–ø–∫–∞ –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å—Ç–æ—è—Ç—å –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π "‚ùå –û—Ç–º–µ–Ω–∞"
        :return: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "‚ùå –û—Ç–º–µ–Ω–∞" –∏ *–°–æ–∑–¥–∞–Ω–Ω–æ–π*
        """

        if button:
            return KeyboardMarkup.reply_keybd([button, "‚ùå –û—Ç–º–µ–Ω–∞"], row=2)
        return KeyboardMarkup.reply_keybd(["‚ùå –û—Ç–º–µ–Ω–∞"], row=1)

    def start(self, update: Update, context: CallbackContext):
        """
        –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞, –æ—á–∏—â–∞–µ—Ç user_data, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ UPLOAD_FILE

        :param update: –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–æ–æ–±—â–µ–Ω–∏–µ
        :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–±—ä–µ–∫—Ç CallbackContext
        :return: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ.
        """

        context.user_data.clear()
        update.message.reply_text("<b>–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ê—Ä—Ö–∏–≤.zip –∏–ª–∏ –õ–æ–≥.txt</b>",
                                  reply_markup=self.keybd_cancel())
        return self.UPLOAD_FILE

    def upload_log_or_zip(self, update: Update, context: CallbackContext):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç Zip-–∞—Ä—Ö–∏–≤ –∏–ª–∏ log-—Ñ–∞–π–ª –∏–∑ Telegram, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ, –∞ –∑–∞—Ç–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ.

        :param update: Update - –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–æ–æ–±—â–µ–Ω–∏–µ
        :param context: CallbackContext ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        :return: –°–æ—Å—Ç–æ—è–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–π—Ç–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä.
        """

        msg = update.message

        date: datetime.date = datetime.datetime.today().date()
        log_file: Path = Path(self.report_dir, date.strftime("%m.%Y"), date.strftime("%d.%m.%Y"), f"log_{date.strftime('%d.%m.%Y')}.json")

        if not os.path.exists(log_file.parent):
            os.makedirs(log_file.parent)

        if msg.document.mime_type == "application/json":
            buf: File = context.bot.get_file(msg.document.file_id)
            buf.download(str(log_file))
            context.user_data["log_file"] = log_file
            msg.reply_text("<b>–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ AML.</b>")
            return self.UPLOAD_AML_LOG

        return ConversationHandler.END

    def upload_aml_log(self, update: Update, context: CallbackContext):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç aml-—Ñ–∞–π–ª –∏–∑ Telegram, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ, –∞ –∑–∞—Ç–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        :param update: –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–æ–æ–±—â–µ–Ω–∏–µ
        :param context: –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–±—ä–µ–∫—Ç telegram.ext.CallbackContext
        :return: –°–æ—Å—Ç–æ—è–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–π—Ç–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä.
        """

        msg = update.message

        date: datetime.date = datetime.datetime.today().date()
        aml_file: Path = Path(self.report_dir, date.strftime("%m.%Y"), date.strftime("%d.%m.%Y"), f"aml_{date.strftime('%d.%m.%Y')}.json")

        if msg.document.mime_type == "application/json":
            buf: File = context.bot.get_file(msg.document.file_id)
            buf.download(str(aml_file))
            msg.reply_text("<b>–ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.</b>")

            with open(context.user_data["log_file"]) as out_log, open(aml_file) as out_aml:
                log_file: dict = ujson.loads(out_log.read())
                aml_file: dict = ujson.loads(out_aml.read())

            log_file = {key: value if value["aml_id"] == a and b else {"user_id": value["user_id"],
                                                                       "aml_id": value["aml_id"],
                                                                       "addresses_count": 0}
                        for key, value in log_file.items() for a, b in aml_file.items()}

            report_and_aml = {key: value["aml_id"] for key, value in log_file.items()}

            user_stata = {}
            for key, value in log_file.items():
                user_stata = {value["user_id"]: {}} if user_stata.get(value["user_id"]) is None else user_stata
                match value["addresses_count"]:
                    case 1:
                        addresses_count = 0.7
                    case 2:
                        addresses_count = 1
                    case 3:
                        addresses_count = 1.2
                    case _:
                        addresses_count = 0

                user_stata.update({
                    value["user_id"]:
                        {
                            "pending_reports": user_stata[value["user_id"]].get("pending_reports", 0) + 1,
                            "approved_reports": user_stata[value["user_id"]].get("approved_reports", 0) + 1 if value["addresses_count"] else user_stata[value["user_id"]].get("approved_reports", 0),
                            "decline_reports": user_stata[value["user_id"]].get("decline_reports", 0) if value["addresses_count"] else user_stata[value["user_id"]].get("decline_reports", 0) + 1,
                            "pending_balance": user_stata[value["user_id"]].get("pending_balance", 0) + addresses_count
                        }
                })

            user_msg_list = []
            for key, value in user_stata.items():
                user = Users.update_statistics(user_id=key, pending_reports=value["pending_reports"], approved_reports=value["approved_reports"],
                                               decline_reports=value["decline_reports"], pending_balance=value["pending_balance"], after_checked=True)

                user_msg_list.append(f"<b>@{user.username} | "
                                     f"<code>{value['approved_reports']} —à—Ç.</code> | <code>{value['decline_reports']} —à—Ç.</code> | "
                                     f"<code>{value['pending_reports']} —à—Ç.</code> | <code>{value['pending_balance']}$</code></b>")

            a = 0
            b = 0
            c = 0.0
            for _, v in user_stata.items():
                a += v["approved_reports"]
                b += v["decline_reports"]
                c += v["pending_balance"]

            user_msg_str = "\n".join(user_msg_list)
            msg.reply_text(f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                           "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                           f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: <code>{a} —à—Ç.</code>\n"
                           f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: <code>{b} —à—Ç.</code>\n"
                           f"–í—Å–µ–≥–æ: <code>{a+b} —à—Ç.</code>\n"
                           f"–ù–∞ –≤—ã–ø–ª–∞—Ç—É: <code>{c}$</code>\n"
                           "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ</b>\n"
                           f"{user_msg_str}", reply_markup=AdminKeyboard.main_menu())

            return ConversationHandler.END

        return

    def cancel(self, update: Update, context: CallbackContext):
        """
        –û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É ConversationHandler.END

        :param update: –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–ª–∏ —á–∞—Ç–µ.
        :param context: –≠—Ç–æ –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.
        :return: –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ ConversationHandler.END
        """

        context.user_data.clear()
        update.message.reply_text("<b>‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>", reply_markup=AdminKeyboard.main_menu())
        return ConversationHandler.END


# Singleton (–û–¥–∏–Ω–æ—á–∫–∞)
AdminUploadConversation = AdminUploadConversation()
