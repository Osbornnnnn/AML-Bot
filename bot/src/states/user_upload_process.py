import re
import uuid
import base64
from telegram import Update
from ..models.users import Users
from ..models.reports import Reports
from ..filters.is_user import IsUser
from ..keyboards import KeyboardMarkup
from ..filters.is_access import IsAccess
from ..keyboards.user_keybd import UserKeyboard
from telegram.ext import ConversationHandler, CallbackContext, MessageHandler, Filters, CallbackQueryHandler


class UserUploadConversation:
    def __init__(self):
        self.WALLETS, self.TOPIC, self.WEBSITE, self.CONTACTS, self.CATEGORY, self.DESCRIPTION, self.SELLER_LANG, self.WEBSITE_LANG, \
            self.WELCOME_SCREEN, self.CONTACT_SCREEN, self.CHAT_SCREEN, self.CHAT_TEXT, self.SEND_REPORT = range(13)
        self.handler = ConversationHandler(
            entry_points=[MessageHandler(Filters.text("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–±—ã—á—É") & IsUser() & IsAccess(), self.start)],
            states={
                self.WALLETS: [MessageHandler(~Filters.text("‚ùå –û—Ç–º–µ–Ω–∞") & IsUser() & IsAccess(), self.add_wallets)],
                self.TOPIC: [MessageHandler(~Filters.text("‚ùå –û—Ç–º–µ–Ω–∞") & IsUser() & IsAccess(), self.add_topic)],
                self.WEBSITE: [MessageHandler(~Filters.text("‚ùå –û—Ç–º–µ–Ω–∞") & IsUser() & IsAccess(), self.add_website)],
                self.CONTACTS: [MessageHandler(~Filters.text("‚ùå –û—Ç–º–µ–Ω–∞") & IsUser() & IsAccess(), self.add_contacts)],
                self.CATEGORY: [MessageHandler(~Filters.text("‚ùå –û—Ç–º–µ–Ω–∞") & IsUser() & IsAccess(), self.add_category)],
                self.DESCRIPTION: [MessageHandler(~Filters.text("‚ùå –û—Ç–º–µ–Ω–∞") & IsUser() & IsAccess(), self.add_description)],
                self.SELLER_LANG: [CallbackQueryHandler(self.select_seller_lang)],
                self.WEBSITE_LANG: [CallbackQueryHandler(self.select_website_lang)],
                self.WELCOME_SCREEN: [MessageHandler(Filters.photo & IsUser() & IsAccess(), self.upload_welcome_screen)],
                self.CONTACT_SCREEN: [MessageHandler((Filters.photo | Filters.text("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")) & IsUser() & IsAccess(), self.upload_contact_screen)],
                self.CHAT_SCREEN: [MessageHandler((Filters.photo | Filters.text("üîú –î–∞–ª–µ–µ")) & IsUser() & IsAccess(), self.upload_chat_screen)],
                self.CHAT_TEXT: [MessageHandler((Filters.document | Filters.text("–ù–µ—Ç –µ—ë, —ç—Ç–æ —Å–∞–π—Ç") | ~Filters.text("‚ùå –û—Ç–º–µ–Ω–∞")) & IsUser() & IsAccess(), self.upload_chat_text)],
                self.SEND_REPORT: [MessageHandler(Filters.text("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å") & IsUser() & IsAccess(), self.send_report)]
            },
            fallbacks=[MessageHandler(Filters.text("‚ùå –û—Ç–º–µ–Ω–∞") & IsUser() & IsAccess(), self.cancel)])
        self.seller_lang = [
            {"text": "–†–æ—Å—Å–∏—è, —Ä—É—Å—Å–∫–∏–π", "callback_data": "lang_ru_rus"},
            {"text": "–£–∫—Ä–∞–∏–Ω–∞, —Ä—É—Å—Å–∫–∏–π", "callback_data": "lang_uk_rus"},
            {"text": "–£–∫—Ä–∞–∏–Ω–∞, —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π", "callback_data": "lang_uk_ukr"},
            {"text": "–°–®–ê, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π", "callback_data": "lang_en_eng"},
            {"text": "–ò—Å–ø–∞–Ω–∏—è, –∏—Å–ø–∞–Ω—Å–∫–∏–π", "callback_data": "lang_is_isp"},
            {"text": "–ö–∏—Ç–∞–π, –∫–∏—Ç–∞–π—Å–∫–∏–π", "callback_data": "lang_ci_chi"},
            {"text": "–û–ê–≠, –∞—Ä–∞–±—Å–∫–∏–π", "callback_data": "lang_ar_ara"},
            {"text": "–§—Ä–∞–Ω—Ü–∏—è, —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π", "callback_data": "lang_fr_fra"},
            {"text": "–ì–µ—Ä–º–∞–Ω–∏—è, –Ω–µ–º–µ—Ü–∫–∏–π", "callback_data": "lang_de_der"},
            {"text": "–ü–æ–ª—å—à–∞, –ø–æ–ª—å—Å–∫–∏–π", "callback_data": "lang_pl_pol"}
        ]
        self.website_lang = [
            {"text": "–†—É—Å—Å–∫–∏–π", "callback_data": "lang_rus"},
            {"text": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "callback_data": "lang_eng"},
            {"text": "–ò—Å–ø–∞–Ω—Å–∫–∏–π", "callback_data": "lang_isp"},
            {"text": "–ö–∏—Ç–∞–π—Å–∫–∏–π", "callback_data": "lang_chi"},
            {"text": "–ê—Ä–∞–±—Å–∫–∏–π", "callback_data": "lang_ara"},
            {"text": "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π", "callback_data": "lang_fra"},
            {"text": "–ù–µ–º–µ—Ü–∫–∏–π", "callback_data": "lang_der"},
            {"text": "–ü–æ–ª—å—Å–∫–∏–π", "callback_data": "lang_pol"},
        ]

    def inline_seller_lang(self):
        return KeyboardMarkup.inline_keybd(self.seller_lang, 3)

    def inline_website_lang(self):
        return KeyboardMarkup.inline_keybd(self.website_lang, 3)

    def keybd_cancel(self, button: str = None):
        if button:
            return KeyboardMarkup.reply_keybd([button, "‚ùå –û—Ç–º–µ–Ω–∞"], row=1)
        return KeyboardMarkup.reply_keybd(["‚ùå –û—Ç–º–µ–Ω–∞"], row=1)

    def start(self, update: Update, context: CallbackContext):
        msg = update.message
        user = Users.get(msg.from_user.id)
        context.user_data.clear()

        if not user.wallet:
            msg.reply_text("<b>–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å. –î–æ–±–∞–≤—å—Ç–µ –∫–æ—à–µ–ª—ë–∫ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã.</b>")
            return ConversationHandler.END

        msg.reply_text("<b>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏/–∏–ª–∏ –∞–¥—Ä–µ—Å–∞ BTC, ETH, TRX (USDT TRC-20), –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –¥–∞–ª –ø—Ä–æ–¥–∞–≤–µ—Ü.\n"
                       "–í–Ω–∏–º–∞–Ω–∏–µ: —Ä–∞–∑–¥–µ–ª—è–π—Ç–µ –∞–¥—Ä–µ—Å–∞ –º–µ–∂–¥—É —Å–æ–±–æ–π –ª—é–±—ã–º –∑–Ω–∞–∫–æ–º.</b>", reply_markup=self.keybd_cancel())

        return self.WALLETS

    def add_wallets(self, update: Update, context: CallbackContext):
        msg = update.message

        if len(msg.text) > 256:
            msg.reply_text("<b>–î–ª–∏–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 256 —Å–∏–º–≤–æ–ª–æ–≤.</b>")
            return

        btc = re.findall(r"([13][a-km-zA-HJ-NP-Z1-9]{26,36}|bc1[ac-hj-np-zAC-HJ-NP-Z02-9]{39,59})", msg.text)
        eth = re.findall(r"0x[a-fA-F0-9]{40}", msg.text)
        trx = re.findall(r"T[A-Za-z1-9]{33}", msg.text)
        adr = Reports.get_by_address(btc + eth + trx)

        context.user_data.update({"btc_address": btc[0] if len(btc) and btc[0] not in list(map(lambda x: x.btc_address, adr)) else None,
                                  "eth_address": eth[0] if len(eth) and eth[0] not in list(map(lambda x: x.eth_address, adr)) else None,
                                  "trx_address": trx[0] if len(trx) and trx[0] not in list(map(lambda x: x.trx_address, adr)) else None})

        if all(i is None for i in context.user_data.values()) and btc + eth + trx:
            msg.reply_text("<b>–í—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –∞–¥—Ä–µ—Å–∞ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.</b>", reply_markup=UserKeyboard.main_menu())
            return ConversationHandler.END
        elif not btc + eth + trx:
            msg.reply_text("<b>–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–¥—Ä–µ—Å.</b>")
            return
        elif adr:
            msg.reply_text("\n".join([f"<b>–ö–æ—à–µ–ª—ë–∫ {x} —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.</b>" for x in btc + eth + trx if x not in context.user_data.values()]))

        msg.reply_text("<b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–º—É, –≥–¥–µ –≤—ã –Ω–∞—à–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞.\n"
                       "–ü—Ä–∏–º–µ—Ä: https://example.com/topic=4654</b>")

        return self.TOPIC

    def add_topic(self, update: Update, context: CallbackContext):
        msg = update.message

        if len(msg.text) > 2048:
            msg.reply_text("<b>–î–ª–∏–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 2048 —Å–∏–º–≤–æ–ª–æ–≤.</b>")
            return

        if not msg.text.startswith("http:") and not msg.text.startswith("https:"):
            msg.reply_text("<b>–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –≤–∫–ª—é—á–∞—Ç—å http:// –∏–ª–∏ https://</b>")
            return

        context.user_data.update({"topic_link": msg.text})

        msg.reply_text("<b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–æ—Ä—É–º–∞.\n"
                       "–ü—Ä–∏–º–µ—Ä: –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–º—É –±—ã–ª–∞ https://example.com/topic=4654, –∑–Ω–∞—á–∏—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é –±—É–¥–µ—Ç https://example.com/</b>")

        return self.WEBSITE

    def add_website(self, update: Update, context: CallbackContext):
        msg = update.message

        if len(msg.text) > 2048:
            msg.reply_text("<b>–î–ª–∏–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 2048 —Å–∏–º–≤–æ–ª–æ–≤.</b>")
            return

        if not msg.text.startswith("http:") and not msg.text.startswith("https:"):
            msg.reply_text("<b>–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –≤–∫–ª—é—á–∞—Ç—å http:// –∏–ª–∏ https://</b>")
            return

        context.user_data.update({"website_link": msg.text})

        msg.reply_text("<b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è / –Ω–∏–∫–Ω–µ–π–º –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –≥–¥–µ –≤—ã —Å –Ω–∏–º –æ–±—â–∞–ª–∏—Å—å.\n"
                       '–ï—Å–ª–∏ —ç—Ç–æ —Å–∞–π—Ç –∞–≤—Ç–æ-–æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"</b>', reply_markup=self.keybd_cancel("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))

        return self.CONTACTS

    def add_contacts(self, update: Update, context: CallbackContext):
        msg = update.message

        if len(msg.text) > 512:
            msg.reply_text("<b>–î–ª–∏–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 512 —Å–∏–º–≤–æ–ª–æ–≤.</b>")
            return

        if msg.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            context.user_data.update({"contact": context.user_data["website_link"]})
        else:
            context.user_data.update({"contact": msg.text})

        msg.reply_text("<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–æ—Ç 1 –¥–æ 61), –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞.</b>",
                       reply_markup=self.keybd_cancel())

        return self.CATEGORY

    def add_category(self, update: Update, context: CallbackContext):
        msg = update.message

        if not msg.text.isdigit():
            msg.reply_text("<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã, –Ω–∏—á–µ–≥–æ –±–æ–ª–µ–µ!</b>")
            return

        context.user_data.update({"category": msg.text})

        msg.reply_text("<b>–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞ (—Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º).\n"
                       "–ü—Ä–∏–º–µ—Ä: selling credit cards (–º–Ω–æ–≥–æ –ø–∏—Å–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ).</b>")

        return self.DESCRIPTION

    def add_description(self, update: Update, context: CallbackContext):
        msg = update.message

        if len(msg.text) > 512:
            msg.reply_text("<b>–î–ª–∏–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 512 —Å–∏–º–≤–æ–ª–æ–≤.</b>")
            return

        context.user_data.update({"description": msg.text})

        msg.reply_text("<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏ —è–∑—ã–∫ –ø—Ä–æ–¥–∞–≤—Ü–∞:</b>", reply_markup=self.inline_seller_lang())

        return self.SELLER_LANG

    def select_seller_lang(self, update: Update, context: CallbackContext):
        query = update.callback_query

        context.user_data.update({"seller_lang": element["text"] for element in self.seller_lang if element["callback_data"] == query.data})

        query.message.edit_text("<b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Ñ–æ—Ä—É–º–∞:</b>", reply_markup=self.inline_website_lang())

        return self.WEBSITE_LANG

    def select_website_lang(self, update: Update, context: CallbackContext):
        query = update.callback_query

        context.user_data.update({"website_lang": element["text"] for element in self.website_lang if element["callback_data"] == query.data})

        query.message.edit_text(f"<b>–Ø–∑—ã–∫ –ø—Ä–æ–¥–∞–≤—Ü–∞: <code>{context.user_data['seller_lang']}</code>\n"
                                f"–Ø–∑—ã–∫ —Ñ–æ—Ä—É–º–∞: <code>{context.user_data['website_lang']}</code></b>")
        query.message.reply_text("<b>–í—Å—Ç–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–µ–º—ã –Ω–∞ —Ñ–æ—Ä—É–º–µ (1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ).\n"
                                 "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Å–∂–∞—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. (–ö–∞–∫ —Ñ–æ—Ç–æ)</b>", reply_markup=self.keybd_cancel())

        return self.WELCOME_SCREEN

    def upload_welcome_screen(self, update: Update, context: CallbackContext):
        msg = update.message

        context.user_data.update({"welcome_screen": msg.photo[-1].file_id})

        msg.reply_text("<b>–í—Å—Ç–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ (1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ).\n"
                       "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Å–∂–∞—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. (–ö–∞–∫ —Ñ–æ—Ç–æ)\n"
                       '–ï—Å–ª–∏ —ç—Ç–æ —Å–∞–π—Ç –∞–≤—Ç–æ-–æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"</b>', reply_markup=self.keybd_cancel("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))

        return self.CONTACT_SCREEN

    def upload_contact_screen(self, update: Update, context: CallbackContext):
        msg = update.message

        if msg.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            context.user_data.update({"contact_screen": context.user_data["welcome_screen"]})
        else:
            context.user_data.update({"contact_screen": msg.photo[-1].file_id})

        msg.reply_text("<b>–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º (–º–∏–Ω–∏–º—É–º 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ).\n"
                       "–í–Ω–∏–º–∞–Ω–∏–µ! –ï—Å–ª–∏ —ç—Ç–æ —Å–∞–π—Ç –∞–≤—Ç–æ-–æ–ø–ª–∞—Ç—ã, —Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç, –≥–¥–µ –≤–∏–¥–µ–Ω –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–æ–≤.\n"
                       "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Å–∂–∞—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏ –±–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏!\n"
                       "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ ¬´üîú –î–∞–ª–µ–µ¬ª</b>", reply_markup=self.keybd_cancel("üîú –î–∞–ª–µ–µ"))

        return self.CHAT_SCREEN

    def upload_chat_screen(self, update: Update, context: CallbackContext):
        msg = update.message

        if msg.text != "üîú –î–∞–ª–µ–µ":
            chat_screen = context.user_data.get("chat_screen")

            if chat_screen is None:
                return context.user_data.update({"chat_screen": [msg.photo[-1].file_id]})
            chat_screen.append(msg.photo[-1].file_id)

            return context.user_data.update({"chat_screen": chat_screen})

        if len(context.user_data.get("chat_screen")) == 0:
            msg.reply_text("<b>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è–±—ã 1 —Å–∫—Ä–∏–Ω—à–æ—Ç.</b>")
            return

        msg.reply_text(f"<b>–ó–∞–≥—Ä—É–∑–∏–ª–æ—Å—å {len(context.user_data.get('chat_screen'))} —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.\n"
                       "–î–∞–ª–µ–µ: –î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .txt —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π UTF-8\n"
                       "–ï—Å–ª–∏ —ç—Ç–æ —Å–∞–π—Ç —Å –∞–≤—Ç–æ-–æ–ø–ª–∞—Ç–æ–π, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–µ—Ç –µ—ë, —ç—Ç–æ —Å–∞–π—Ç¬ª</b>", reply_markup=self.keybd_cancel("–ù–µ—Ç –µ—ë, —ç—Ç–æ —Å–∞–π—Ç"))

        return self.CHAT_TEXT

    def upload_chat_text(self, update: Update, context: CallbackContext):
        msg = update.message

        if msg.text:
            context.user_data.update({"chat_text": base64.b64encode(msg.text.encode()).decode()})
        else:
            context.user_data.update({"chat_text": msg.document.file_id})

        msg.reply_text("<b>–ù–∞–∂–º–∏—Ç–µ ¬´‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.</b>",
                       reply_markup=self.keybd_cancel("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å"))

        return self.SEND_REPORT

    def send_report(self, update: Update, context: CallbackContext):
        msg = update.message

        context.user_data.update({"report_id": str(uuid.uuid1()), "user_id": update.message.from_user.id})
        Reports.update(context.user_data)

        Users.update_statistics(pending_reports=1)

        msg.reply_text(f"<b>‚Ññ <code>{context.user_data['report_id']}</code>\n"
                       "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n"
                       "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ–æ–±—â–∏—Ç—å –µ—â–µ –æ–± –æ–¥–Ω–æ–º –∞–¥—Ä–µ—Å–µ, –∂–º–∏—Ç–µ ¬´üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–±—ã—á—É¬ª</b>", reply_markup=UserKeyboard.main_menu())

        return ConversationHandler.END

    def cancel(self, update: Update, context: CallbackContext):
        context.user_data.clear()
        update.message.reply_text("<b>‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>", reply_markup=UserKeyboard.main_menu())
        return ConversationHandler.END

UserUploadConversation = UserUploadConversation()
